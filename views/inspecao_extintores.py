from operations.instrucoes import instru_extinguisher
from config.page_config import set_page_config
from utils.auditoria import log_action
from auth.auth_utils import (
    check_user_access, can_edit, has_ai_features,
    get_user_display_name
)

from storage.client import upload_evidence_photo
from operations.qr_inspection_utils import decode_qr_from_image
from operations.history import find_last_record
from operations.extinguisher_operations import (
    process_extinguisher_pdf, calculate_next_dates, save_inspection,
    generate_action_plan, clean_and_prepare_ia_data, save_new_extinguisher,
    save_inspection_batch
)
import streamlit as st
import pandas as pd
from datetime import date
import sys
import os
from streamlit_js_eval import streamlit_js_eval

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


set_page_config()


@st.cache_data(ttl=300)
def load_page_data():
    """Carrega dados dos extintores do Supabase"""
    from operations.history import load_sheet_data
    from config.table_names import EXTINGUISHER_SHEET_NAME
    
    return load_sheet_data(EXTINGUISHER_SHEET_NAME)


def show_upgrade_callout(feature_name="Esta funcionalidade", required_plan="Premium IA"):
    st.info(f"‚ú® **{feature_name}** est√° dispon√≠vel no plano **{required_plan}**. Fa√ßa o upgrade para automatizar seu trabalho!", icon="üöÄ")


def show_page():
    st.title("üî• Gest√£o e Inspe√ß√£o de Extintores")

    # Check if user has at least viewer permissions
    if not check_user_access("viewer"):
        st.warning("Voc√™ n√£o tem permiss√£o para acessar esta p√°gina.")
        return

    if 'current_spreadsheet_id' not in st.session_state:
        st.warning(
            "Ambiente de dados n√£o carregado. Verifique o status da sua conta na barra lateral.")
        st.stop()

    try:
        df_extintores = load_page_data()
    except Exception as e:
        st.error(
            f"N√£o foi poss√≠vel carregar o invent√°rio de extintores. Erro: {e}")
        st.stop()

    tab_instrucoes, tab_qr, tab_batch, tab_cadastro, tab_manual = st.tabs([
        "üìñ Como Usar",
        "üì± Inspe√ß√£o R√°pida (QR Code)",
        "üóÇÔ∏è Registro em Lote (PDF)",
        "‚ûï Cadastrar / Editar",
        "üìù Cadastro Manual"
    ])

    with tab_instrucoes:
        instru_extinguisher()

    with tab_batch:
        st.header("Processar Relat√≥rio de Manuten√ß√£o em Lote")

        # Check for AI features for this tab
        if not has_ai_features():
            show_upgrade_callout("Processamento de PDF com IA")
        # Check for edit permissions
        elif not can_edit():
            st.warning(
                "Voc√™ precisa de permiss√µes de edi√ß√£o para registrar inspe√ß√µes.")
            st.info(
                "Somente usu√°rios com n√≠vel 'editor' ou superior podem adicionar dados.")
        else:
            st.info(
                "O sistema analisar√° o PDF, buscar√° o hist√≥rico de cada equipamento e atualizar√° as datas de vencimento.")
            st.session_state.setdefault('batch_step', 'start')
            st.session_state.setdefault('processed_data', None)

            uploaded_pdf = st.file_uploader("Escolha o relat√≥rio PDF", type=[
                                            "pdf"], key="batch_pdf_uploader")

            if uploaded_pdf and st.button("üîé Analisar Dados do PDF com IA"):
                with st.spinner("Analisando o documento e cruzando com o hist√≥rico..."):
                    extracted_list = process_extinguisher_pdf(uploaded_pdf)
                    if extracted_list:
                        processed_list = []
                        for item in extracted_list:
                            item = clean_and_prepare_ia_data(item)
                            if isinstance(item, dict):
                                # Busca √∫ltimo registro
                                last_record = find_last_record(
                                    df_extintores,
                                    item.get('numero_identificacao'),
                                    'numero_identificacao'
                                )

                                # Preserva datas existentes
                                existing_dates = {
                                    k: last_record.get(k)
                                    for k in ['data_proxima_inspecao', 'data_proxima_manutencao_2_nivel',
                                              'data_proxima_manutencao_3_nivel', 'data_ultimo_ensaio_hidrostatico']
                                } if last_record is not None else {}

                                # Calcula novas datas
                                updated_dates = calculate_next_dates(
                                    item.get('data_servico'),
                                    item.get('tipo_servico', 'Inspe√ß√£o'),
                                    existing_dates
                                )

                                # ‚úÖ CORRE√á√ÉO: Monta dicion√°rio na ORDEM EXATA das colunas
                                final_item = {
                                    'numero_identificacao': item.get('numero_identificacao'),
                                    'numero_selo_inmetro': item.get('numero_selo_inmetro'),
                                    'tipo_agente': item.get('tipo_agente'),
                                    'capacidade': item.get('capacidade'),
                                    'marca_fabricante': item.get('marca_fabricante'),
                                    'ano_fabricacao': item.get('ano_fabricacao'),
                                    'tipo_servico': item.get('tipo_servico'),
                                    'data_servico': item.get('data_servico'),
                                    'inspetor_responsavel': item.get('inspetor_responsavel'),
                                    'empresa_executante': item.get('empresa_executante'),
                                    'data_proxima_inspecao': updated_dates.get('data_proxima_inspecao'),
                                    'data_proxima_manutencao_2_nivel': updated_dates.get('data_proxima_manutencao_2_nivel'),
                                    'data_proxima_manutencao_3_nivel': updated_dates.get('data_proxima_manutencao_3_nivel'),
                                    'data_ultimo_ensaio_hidrostatico': updated_dates.get('data_ultimo_ensaio_hidrostatico'),
                                    'aprovado_inspecao': item.get('aprovado_inspecao'),
                                    'observacoes_gerais': item.get('observacoes_gerais'),
                                    'plano_de_acao': generate_action_plan(item),
                                    'link_relatorio_pdf': None,
                                    'latitude': None,
                                    'longitude': None,
                                    'link_foto_nao_conformidade': None
                                }

                                processed_list.append(final_item)

                        st.session_state.processed_data = processed_list
                        st.session_state.batch_step = 'confirm'
                        st.rerun()
                    else:
                        st.error("N√£o foi poss√≠vel extrair dados do arquivo.")

            if st.session_state.batch_step == 'confirm' and st.session_state.processed_data:
                st.subheader("Confira os Dados e Confirme o Registro")
                st.dataframe(pd.DataFrame(st.session_state.processed_data))

                if st.button("üíæ Confirmar e Salvar no Sistema", type="primary"):
                    with st.spinner("Preparando e salvando dados..."):
                        pdf_link = None
                        # ‚úÖ CORRE√á√ÉO: Usa save_inspection_batch que garante a ordem correta
                        for record in st.session_state.processed_data:
                            # Adiciona link do PDF se necess√°rio
                            if record.get('tipo_servico') in ["Manuten√ß√£o N√≠vel 2", "Manuten√ß√£o N√≠vel 3"]:
                                record['link_relatorio_pdf'] = pdf_link

                        # Salva usando a fun√ß√£o correta
                        success, count = save_inspection_batch(
                            st.session_state.processed_data)

                        if success:
                            st.success(
                                f"‚úÖ {count} registros salvos com sucesso!")
                            #st.balloons()
                            st.session_state.batch_step = 'start'
                            st.session_state.processed_data = None
                            st.cache_data.clear()
                            st.rerun()
                        else:
                            st.error(
                                "‚ùå Erro ao salvar registros. Verifique os logs.")

    with tab_qr:
        st.header("Verifica√ß√£o R√°pida de Equipamento")

        # Check for edit permissions
        if not can_edit():
            st.warning(
                "Voc√™ precisa de permiss√µes de edi√ß√£o para registrar inspe√ß√µes.")
            st.info(
                "Somente usu√°rios com n√≠vel 'editor' ou superior podem adicionar dados.")
        else:
            # Inicializa session state
            st.session_state.setdefault('qr_step', 'start')
            st.session_state.setdefault('qr_id', None)
            st.session_state.setdefault('last_record', None)
            st.session_state.setdefault('location', None)

            # ====================================================================
            # ETAPA: CAPTURA INICIAL DE LOCALIZA√á√ÉO (HIGH ACCURACY)
            # ====================================================================
            if st.session_state.qr_step == 'start' and st.session_state.location is None:
                with st.spinner("üìç Aguardando permiss√£o e localiza√ß√£o de alta precis√£o..."):
                    loc = streamlit_js_eval(js_expressions="""
                        new Promise(function(resolve, reject) {
                            const options = { 
                                enableHighAccuracy: true, 
                                timeout: 10000, 
                                maximumAge: 0 
                            };
                            navigator.geolocation.getCurrentPosition(
                                function(p) { 
                                    resolve({
                                        latitude: p.coords.latitude, 
                                        longitude: p.coords.longitude, 
                                        accuracy: p.coords.accuracy
                                    }); 
                                },
                                function(e) { resolve(null); },
                                options
                            );
                        });
                    """, key="qr_initial_location")

                    if loc:
                        st.session_state.location = loc
                        st.rerun()

            # ====================================================================
            # ETAPA 1: IDENTIFICA√á√ÉO DO EQUIPAMENTO
            # ====================================================================
            if st.session_state.qr_step == 'start':
                location = st.session_state.location
                if location:
                    accuracy = location.get('accuracy', 999)
                    PRECISION_THRESHOLD = 30  # metros

                    if accuracy <= PRECISION_THRESHOLD:
                        st.success(
                            f"‚úÖ Localiza√ß√£o pronta! (Precis√£o: {accuracy:.1f} metros)")
                    else:
                        st.warning(
                            f"‚ö†Ô∏è Localiza√ß√£o com baixa precis√£o ({accuracy:.1f}m). "
                            f"Tente ir para um local mais aberto ou use a digita√ß√£o manual."
                        )
                else:
                    st.error(
                        "‚ùå A geolocaliza√ß√£o √© necess√°ria para continuar com a inspe√ß√£o.")
                    st.info(
                        "üí° **Dica:** Certifique-se de permitir o acesso √† localiza√ß√£o no seu navegador. "
                        "A inspe√ß√£o QR Code requer coordenadas GPS para garantir a rastreabilidade."
                    )

                st.subheader("1Ô∏è‚É£ Identifique o Equipamento")

                col1, col2, col3 = st.columns([2, 0.5, 2])

                with col1:
                    st.info("**Op√ß√£o A: Leitura R√°pida**")
                    scan_btn = st.button(
                        "üì∑ Escanear QR Code",
                        type="primary",
                        use_container_width=True,
                        disabled=not location,
                        help="Aponte a c√¢mera para o QR Code do extintor"
                    )
                    if scan_btn:
                        st.session_state.qr_step = 'scan'
                        st.rerun()

                with col3:
                    st.info("**Op√ß√£o B: Digita√ß√£o Manual**")
                    manual_id = st.text_input(
                        "ID do Equipamento",
                        key="manual_id_qr",
                        label_visibility="collapsed",
                        placeholder="Digite o ID do extintor"
                    )
                    search_btn = st.button(
                        "üîç Buscar por ID",
                        use_container_width=True,
                        disabled=not location,
                        help="Digite o n√∫mero de identifica√ß√£o do extintor"
                    )
                    if search_btn:
                        if manual_id:
                            st.session_state.qr_id = manual_id
                            st.session_state.last_record = find_last_record(
                                df_extintores,
                                manual_id,
                                'numero_identificacao'
                            )
                            st.session_state.qr_step = 'inspect'
                            st.rerun()
                        else:
                            st.warning("‚ö†Ô∏è Digite um ID v√°lido.")

                # Bot√£o para tentar obter localiza√ß√£o novamente
                if not location:
                    st.markdown("---")
                    if st.button("üîÑ Tentar Obter Localiza√ß√£o Novamente", use_container_width=True):
                        st.session_state.location = None
                        st.rerun()

            # ====================================================================
            # ETAPA 2: ESCANEAMENTO DO QR CODE
            # ====================================================================
            if st.session_state.qr_step == 'scan':
                st.subheader("2Ô∏è‚É£ Aponte a c√¢mera para o QR Code")

                qr_image = st.camera_input(
                    "C√¢mera",
                    key="qr_camera",
                    label_visibility="collapsed"
                )

                if qr_image:
                    with st.spinner("üîç Processando QR Code..."):
                        decoded_id, _ = decode_qr_from_image(qr_image)

                        if decoded_id:
                            st.session_state.qr_id = decoded_id
                            st.session_state.last_record = find_last_record(
                                df_extintores,
                                decoded_id,
                                'numero_identificacao'
                            )
                            st.session_state.qr_step = 'inspect'
                            st.rerun()
                        else:
                            st.warning(
                                "‚ö†Ô∏è QR Code n√£o detectado. Tente novamente com melhor ilumina√ß√£o.")

                if st.button("‚ùå Cancelar", use_container_width=True):
                    st.session_state.qr_step = 'start'
                    st.rerun()

            # ====================================================================
            # ETAPA 3: REGISTRO DA INSPE√á√ÉO
            # ====================================================================
            if st.session_state.qr_step == 'inspect':
                last_record = st.session_state.last_record

                if last_record:
                    st.success(
                        f"‚úÖ Equipamento Encontrado! ID: **{st.session_state.qr_id}**")

                    # Card com informa√ß√µes do equipamento
                    with st.container(border=True):
                        col1, col2, col3 = st.columns(3)

                        col1.metric(
                            "üè∑Ô∏è √öltimo Selo",
                            last_record.get('numero_selo_inmetro', 'N/A')
                        )

                        col2.metric(
                            "üî• Tipo",
                            last_record.get('tipo_agente', 'N/A')
                        )

                        # Calcula pr√≥ximo vencimento
                        vencimentos = [
                            pd.to_datetime(last_record.get(d), errors='coerce')
                            for d in ['data_proxima_inspecao', 'data_proxima_manutencao_2_nivel', 'data_proxima_manutencao_3_nivel']
                        ]
                        valid_vencimentos = [
                            d for d in vencimentos if pd.notna(d)]
                        proximo_vencimento = min(
                            valid_vencimentos) if valid_vencimentos else None
                        vencimento_str = proximo_vencimento.strftime(
                            '%d/%m/%Y') if proximo_vencimento else 'N/A'

                        # Status visual do vencimento
                        if proximo_vencimento:
                            days_until = (proximo_vencimento -
                                          pd.Timestamp(date.today())).days
                            if days_until < 0:
                                col3.metric(
                                    "‚è∞ Pr√≥ximo Vencimento", vencimento_str, delta="VENCIDO", delta_color="inverse")
                            elif days_until <= 7:
                                col3.metric("‚è∞ Pr√≥ximo Vencimento", vencimento_str,
                                            delta=f"{days_until} dias", delta_color="off")
                            else:
                                col3.metric("‚è∞ Pr√≥ximo Vencimento",
                                            vencimento_str)
                        else:
                            col3.metric("‚è∞ Pr√≥ximo Vencimento", vencimento_str)

                    st.markdown("---")
                    st.subheader("3Ô∏è‚É£ Registrar Nova Inspe√ß√£o (N√≠vel 1)")

                    # Status do equipamento
                    status = st.radio(
                        "**Status do Equipamento:**",
                        ["‚úÖ Conforme", "‚ùå N√£o Conforme"],
                        horizontal=True,
                        key="qr_status_radio"
                    )

                    # L√≥gica de n√£o conformidades
                    issues = []
                    photo_non_compliance = None

                    if status == "‚ùå N√£o Conforme":
                        st.warning(
                            "‚ö†Ô∏è **Equipamento reprovado!** Selecione os problemas encontrados:")

                        issue_options = [
                            "Lacre Violado",
                            "Man√¥metro Fora de Faixa",
                            "Dano Vis√≠vel no Corpo",
                            "Obstru√ß√£o de Acesso",
                            "Sinaliza√ß√£o Inadequada/Faltando",
                            "Suporte Danificado/Faltando",
                            "Pintura Danificada/Corros√£o"
                        ]

                        issues = st.multiselect(
                            "Selecione as n√£o conformidades encontradas:",
                            issue_options,
                            key="qr_issues_multiselect"
                        )

                        st.markdown("---")
                        st.info(
                            "üì∏ **Opcional:** Registre uma foto da n√£o conformidade para documenta√ß√£o.")

                        if st.toggle("üì∑ Anexar foto da n√£o conformidade", key="toggle_nc_photo_qr"):
                            st.write(
                                "**Op√ß√£o 1: Tirar Foto Agora (Qualidade Menor)**")
                            camera_photo = st.camera_input(
                                "C√¢mera",
                                label_visibility="collapsed",
                                key="nc_camera_qr"
                            )

                            st.markdown("---")
                            st.write(
                                "**Op√ß√£o 2: Enviar da Galeria (Qualidade Alta)**")
                            gallery_photo = st.file_uploader(
                                "Galeria",
                                type=["jpg", "jpeg", "png"],
                                label_visibility="collapsed",
                                key="nc_uploader_qr"
                            )

                            # Prioriza galeria sobre c√¢mera
                            if gallery_photo:
                                photo_non_compliance = gallery_photo
                            elif camera_photo:
                                photo_non_compliance = camera_photo

                    st.markdown("---")

                    # Formul√°rio de confirma√ß√£o
                    with st.form("quick_inspection_form"):
                        location = st.session_state.location

                        # Exibe informa√ß√µes de localiza√ß√£o
                        if location:
                            accuracy = location.get('accuracy', 999)

                            col_loc1, col_loc2, col_loc3 = st.columns(3)
                            col_loc1.metric(
                                "üìç Latitude", f"{location['latitude']:.6f}")
                            col_loc2.metric(
                                "üìç Longitude", f"{location['longitude']:.6f}")
                            col_loc3.metric("üéØ Precis√£o", f"{accuracy:.1f}m")

                            if accuracy <= 30:
                                st.success(
                                    "‚úÖ Localiza√ß√£o de alta precis√£o registrada.")
                            else:
                                st.info(
                                    f"‚ÑπÔ∏è Localiza√ß√£o registrada com precis√£o de {accuracy:.1f} metros.")
                        else:
                            st.warning(
                                "‚ö†Ô∏è Localiza√ß√£o n√£o obtida. A inspe√ß√£o n√£o pode ser registrada.")

                        # Bot√£o de submit
                        submitted = st.form_submit_button(
                            "‚úÖ Confirmar e Registrar Inspe√ß√£o",
                            type="primary",
                            disabled=not location,
                            use_container_width=True
                        )

                        if submitted:
                            with st.spinner("üíæ Salvando inspe√ß√£o..."):
                                # Upload de foto se houver
                                photo_link_nc = None
                                if photo_non_compliance:
                                    photo_link_nc = upload_evidence_photo(
                                        photo_non_compliance,
                                        st.session_state.qr_id,
                                        "nao_conformidade"
                                    )

                                # Prepara novo registro
                                new_record = last_record.copy()

                                # Preserva datas existentes
                                existing_dates = {
                                    'data_proxima_inspecao': last_record.get('data_proxima_inspecao'),
                                    'data_proxima_manutencao_2_nivel': last_record.get('data_proxima_manutencao_2_nivel'),
                                    'data_proxima_manutencao_3_nivel': last_record.get('data_proxima_manutencao_3_nivel'),
                                    'data_ultimo_ensaio_hidrostatico': last_record.get('data_ultimo_ensaio_hidrostatico'),
                                }

                                # Calcula novas datas
                                updated_dates = calculate_next_dates(
                                    service_date_str=date.today().isoformat(),
                                    service_level="Inspe√ß√£o",
                                    existing_dates=existing_dates
                                )

                                # Monta observa√ß√µes
                                aprovado_str = "Sim" if status == "‚úÖ Conforme" else "N√£o"

                                if status == "‚úÖ Conforme":
                                    observacoes = "Inspe√ß√£o de rotina OK. Equipamento conforme."
                                else:
                                    observacoes = "N√£o conformidades: " + \
                                        ", ".join(
                                            issues) if issues else "Equipamento reprovado (detalhes n√£o especificados)"

                                # Gera plano de a√ß√£o
                                temp_plan_record = {
                                    'aprovado_inspecao': aprovado_str,
                                    'observacoes_gerais': observacoes
                                }

                                # Atualiza registro
                                new_record.update({
                                    'tipo_servico': "Inspe√ß√£o",
                                    'data_servico': date.today().isoformat(),
                                    'inspetor_responsavel': get_user_display_name(),
                                    'aprovado_inspecao': aprovado_str,
                                    'observacoes_gerais': observacoes,
                                    'plano_de_acao': generate_action_plan(temp_plan_record),
                                    'link_relatorio_pdf': None,
                                    'latitude': location['latitude'],
                                    'longitude': location['longitude'],
                                    'link_foto_nao_conformidade': photo_link_nc
                                })

                                new_record.update(updated_dates)

                                # Salva inspe√ß√£o
                                if save_inspection(new_record):
                                    log_action(
                                        "INSPECIONOU_EXTINTOR_QR",
                                        f"ID: {st.session_state.qr_id}, Status: {status}"
                                    )

                                    st.success(
                                        "‚úÖ Inspe√ß√£o registrada com sucesso!")

                                    # Exibe resumo
                                    st.info(
                                        f"üìã **Resumo:**\n"
                                        f"- Equipamento: {st.session_state.qr_id}\n"
                                        f"- Status: {status}\n"
                                        f"- Localiza√ß√£o: Lat {location['latitude']:.6f}, Lon {location['longitude']:.6f}\n"
                                        f"- Precis√£o: {location.get('accuracy', 'N/A'):.1f}m"
                                    )

                                    #st.balloons()

                                    # Reset para pr√≥xima inspe√ß√£o
                                    st.session_state.qr_step = 'start'
                                    st.session_state.location = None
                                    st.cache_data.clear()
                                    st.rerun()
                                else:
                                    st.error(
                                        "‚ùå Erro ao salvar inspe√ß√£o. Tente novamente.")

                    st.markdown("---")

                    if st.button("üîÑ Inspecionar Outro Equipamento", use_container_width=True):
                        st.session_state.qr_step = 'start'
                        st.session_state.location = None
                        st.rerun()

                else:
                    st.error(
                        f"‚ùå Nenhum registro encontrado para o ID '{st.session_state.qr_id}'. "
                        f"Verifique se o extintor est√° cadastrado na aba 'Cadastrar / Editar'."
                    )

                    if st.button("üîô Voltar", use_container_width=True):
                        st.session_state.qr_step = 'start'
                        st.rerun()

    with tab_cadastro:
        if not can_edit():
            st.warning(
                "Voc√™ n√£o tem permiss√£o para cadastrar ou editar extintores. Contate um administrador.")
        else:
            st.header("Gerenciar Invent√°rio de Extintores")
            with st.expander("‚ûï Cadastrar Novo Extintor", expanded=False):
                with st.form("new_extinguisher_form", clear_on_submit=True):
                    st.subheader("Dados do Novo Equipamento")
                    cols = st.columns(2)
                    numero_id = cols[0].text_input(
                        "N√∫mero de Identifica√ß√£o*", help="O ID √∫nico do extintor.")
                    selo_inmetro = cols[1].text_input("N¬∫ Selo INMETRO")
                    tipo_agente = cols[0].selectbox(
                        "Tipo de Agente", ["AP", "BC", "ABC", "CO2", "Espuma Mec√¢nica"])
                    capacidade = cols[1].number_input(
                        "Capacidade (ex: 6, 10)", step=1.0, format="%.2f")
                    marca = cols[0].text_input("Marca/Fabricante")
                    ano_fab = cols[1].number_input(
                        "Ano de Fabrica√ß√£o", min_value=1980, max_value=date.today().year, step=1)
                    submitted_new = st.form_submit_button(
                        "Salvar Novo Extintor", type="primary")
                    if submitted_new:
                        if not numero_id:
                            st.error(
                                "O campo 'N√∫mero de Identifica√ß√£o' √© obrigat√≥rio.")
                        else:
                            details = {
                                'numero_identificacao': numero_id,
                                'numero_selo_inmetro': selo_inmetro,
                                'tipo_agente': tipo_agente,
                                'capacidade': capacidade,
                                'marca_fabricante': marca,
                                'ano_fabricacao': ano_fab
                            }
                            if save_new_extinguisher(details):
                                st.success(
                                    f"Extintor '{numero_id}' cadastrado com sucesso!")
                                st.cache_data.clear()
                                st.rerun()

            st.markdown("---")
            with st.expander("‚úèÔ∏è Atualizar Extintor Existente"):
                if df_extintores.empty:
                    st.info("Nenhum extintor cadastrado para atualizar.")
                else:
                    unique_ids = df_extintores['numero_identificacao'].unique().tolist()
                    ext_id_to_edit = st.selectbox("Selecione o extintor para atualizar:", options=[
                                                  ""] + unique_ids)
                    if ext_id_to_edit:
                        ext_data = df_extintores[df_extintores['numero_identificacao'] == ext_id_to_edit].sort_values('data_servico', ascending=False).iloc[0]
                        with st.form("edit_extinguisher_form"):
                            st.info(
                                f"Editando dados do extintor **{ext_id_to_edit}**")
                            edit_selo_inmetro = st.text_input(
                                "N¬∫ Selo INMETRO", value=ext_data.get('numero_selo_inmetro', ''))
                            submitted_edit = st.form_submit_button(
                                "Salvar Altera√ß√µes")
                            if submitted_edit:
                                new_record = ext_data.to_dict()
                                new_record['numero_selo_inmetro'] = edit_selo_inmetro
                                new_record['tipo_servico'] = "Atualiza√ß√£o Cadastral"
                                new_record['data_servico'] = date.today().isoformat()
                                new_record['inspetor_responsavel'] = get_user_display_name()
                                new_record['aprovado_inspecao'] = "N/A"
                                new_record['observacoes_gerais'] = f"Selo INMETRO atualizado para {edit_selo_inmetro}."
                                new_record['plano_de_acao'] = "N/A"

                                if save_inspection(new_record):
                                    log_action("ATUALIZOU_EXTINTOR", f"ID: {ext_id_to_edit}, Novo Selo: {edit_selo_inmetro}")
                                    st.success(f"Extintor '{ext_id_to_edit}' atualizado com sucesso!")
                                    st.cache_data.clear()
                                    st.rerun()

    # Nova aba para cadastro manual de inspe√ß√µes
    with tab_manual:
        st.header("Cadastro Manual de Inspe√ß√£o")

        if not can_edit():
            st.warning(
                "Voc√™ precisa de permiss√µes de edi√ß√£o para registrar inspe√ß√µes.")
        else:
            st.info(
                "Use este formul√°rio para cadastrar manualmente uma inspe√ß√£o de extintor, sem necessidade de processamento IA.")

            st.markdown("---")
            st.subheader("üåê Passo 1: Capturar Localiza√ß√£o GPS (Opcional)")

            col_btn1, col_btn2 = st.columns([3, 1])

            with col_btn1:
                st.info(
                    "Clique no bot√£o ao lado para capturar automaticamente as coordenadas GPS do seu dispositivo.")

            with col_btn2:
                capture_location = st.button(
                    "üìç Capturar GPS", use_container_width=True, type="secondary", key="btn_capture_gps_manual")

            # Inicializa vari√°veis de sess√£o para as coordenadas
            if 'manual_lat_captured' not in st.session_state:
                st.session_state['manual_lat_captured'] = None
            if 'manual_lon_captured' not in st.session_state:
                st.session_state['manual_lon_captured'] = None

            # Captura a localiza√ß√£o quando o bot√£o √© clicado
            if capture_location:
                st.session_state['capture_geo_manual'] = True

            # Executa a captura se o flag estiver ativo
            if st.session_state.get('capture_geo_manual', False):
                location_js = streamlit_js_eval(js_expressions="""
                    new Promise(function(resolve, reject) {
                        navigator.geolocation.getCurrentPosition(
                            function(position) { 
                                resolve({ 
                                    latitude: position.coords.latitude, 
                                    longitude: position.coords.longitude 
                                }); 
                            },
                            function(error) { 
                                resolve({ error: error.message }); 
                            }
                        );
                    });
                """, key="manual_inspection_geolocation")

                if location_js:
                    # Reset flag
                    st.session_state['capture_geo_manual'] = False

                    if 'error' in location_js:
                        st.error(
                            f"‚ùå Erro ao capturar localiza√ß√£o: {location_js['error']}")
                        st.info(
                            "Verifique se voc√™ permitiu o acesso √† localiza√ß√£o no seu navegador.")
                    else:
                        # Salva as coordenadas no session_state
                        st.session_state['manual_lat_captured'] = location_js['latitude']
                        st.session_state['manual_lon_captured'] = location_js['longitude']

                        st.success(f"‚úÖ Localiza√ß√£o capturada com sucesso!")

                        # Exibe as coordenadas
                        col_display1, col_display2 = st.columns(2)

                        with col_display1:
                            st.metric("üìç Latitude",
                                      f"{location_js['latitude']:.6f}")

                        with col_display2:
                            st.metric("üìç Longitude",
                                      f"{location_js['longitude']:.6f}")

                        st.info(
                            "üí° As coordenadas foram salvas e ser√£o preenchidas automaticamente no formul√°rio abaixo.")

                        # Link para o Google Maps
                        lat = location_js['latitude']
                        lon = location_js['longitude']
                        maps_url = f"https://www.google.com/maps?q={lat},{lon}"
                        st.markdown(
                            f"üó∫Ô∏è [Ver localiza√ß√£o no Google Maps]({maps_url})")

            # ====================================================================
            # SE√á√ÉO 2: SELE√á√ÉO DE LOCAL (FORA DO FORMUL√ÅRIO)
            # ====================================================================
            st.markdown("---")
            st.subheader("üìç Passo 2: Selecionar Local (Opcional)")

            from operations.location_operations import show_location_selector

            # Widget de sele√ß√£o de local - FORA DO FORMUL√ÅRIO
            selected_location = show_location_selector(
                key_suffix="manual_inspection",
                required=False,
                current_value=None
            )

            if selected_location:
                st.success(f"‚úÖ Local selecionado: **{selected_location}**")

            # ====================================================================
            # SE√á√ÉO 3: FORMUL√ÅRIO DE INSPE√á√ÉO (SEM BOT√ïES INTERNOS)
            # ====================================================================
            st.markdown("---")
            st.subheader("üìù Passo 3: Preencher Dados da Inspe√ß√£o")

            with st.form("manual_inspection_form", clear_on_submit=True):
                st.write("**Dados do Equipamento**")

                # Dados b√°sicos do equipamento
                col1, col2 = st.columns(2)
                numero_identificacao = col1.text_input(
                    "N√∫mero de Identifica√ß√£o*", help="O ID √∫nico do extintor.")
                numero_selo_inmetro = col2.text_input("N¬∫ Selo INMETRO")

                col3, col4 = st.columns(2)
                tipo_agente = col3.selectbox(
                    "Tipo de Agente", ["AP", "BC", "ABC", "CO2", "Espuma Mec√¢nica"])
                capacidade = col4.number_input(
                    "Capacidade", step=1.0, format="%.2f")

                col5, col6 = st.columns(2)
                marca_fabricante = col5.text_input("Marca/Fabricante")
                ano_fabricacao = col6.number_input(
                    "Ano de Fabrica√ß√£o", min_value=1980, max_value=date.today().year, step=1)

                # Dados da inspe√ß√£o
                st.markdown("---")
                st.write("**Informa√ß√µes da Inspe√ß√£o**")

                col7, col8 = st.columns(2)
                tipo_servico = col7.selectbox(
                    "Tipo de Servi√ßo", ["Inspe√ß√£o", "Manuten√ß√£o N√≠vel 2", "Manuten√ß√£o N√≠vel 3"])
                data_servico = col8.date_input(
                    "Data do Servi√ßo", value=date.today())

                col9, col10 = st.columns(2)
                aprovado = col9.radio("Aprovado na Inspe√ß√£o?", [
                                      "Sim", "N√£o"], horizontal=True)
                empresa_executante = col10.text_input(
                    "Empresa Executante (opcional)")

                observacoes_gerais = st.text_area(
                    "Observa√ß√µes", help="Descreva problemas encontrados, se houver.")

                # Coordenadas GPS (somente leitura dentro do formul√°rio)
                st.markdown("---")
                st.write("**üó∫Ô∏è Coordenadas GPS**")

                col_geo1, col_geo2 = st.columns(2)

                # Pega valores do session_state ou permite entrada manual
                default_lat = st.session_state.get('manual_lat_captured')
                default_lon = st.session_state.get('manual_lon_captured')

                with col_geo1:
                    manual_latitude = st.number_input(
                        "Latitude",
                        value=default_lat,
                        format="%.6f",
                        help="Use o bot√£o 'Capturar GPS' acima ou digite manualmente",
                        key="manual_lat_input"
                    )

                with col_geo2:
                    manual_longitude = st.number_input(
                        "Longitude",
                        value=default_lon,
                        format="%.6f",
                        help="Use o bot√£o 'Capturar GPS' acima ou digite manualmente",
                        key="manual_lon_input"
                    )

                # BOT√ÉO DE SUBMIT DO FORMUL√ÅRIO
                submitted = st.form_submit_button(
                    "üíæ Salvar Inspe√ß√£o", type="primary", use_container_width=True)

                if submitted:
                    if not numero_identificacao:
                        st.error(
                            "‚ùå O campo 'N√∫mero de Identifica√ß√£o' √© obrigat√≥rio.")
                    else:
                        with st.spinner("Salvando inspe√ß√£o..."):
                            # Busca o √∫ltimo registro para preservar datas existentes
                            last_record = find_last_record(
                                df_extintores, numero_identificacao, 'numero_identificacao')

                            # Define datas existentes para preservar
                            existing_dates = {}
                            if last_record:
                                existing_dates = {
                                    k: last_record.get(k)
                                    for k in ['data_proxima_inspecao', 'data_proxima_manutencao_2_nivel',
                                              'data_proxima_manutencao_3_nivel', 'data_ultimo_ensaio_hidrostatico']
                                }

                            # Calcula as novas datas com base no tipo de servi√ßo
                            updated_dates = calculate_next_dates(
                                data_servico.isoformat(), tipo_servico, existing_dates)

                            # Gera plano de a√ß√£o
                            inspection_data = {
                                'aprovado_inspecao': aprovado,
                                'observacoes_gerais': observacoes_gerais
                            }
                            plano_acao = generate_action_plan(inspection_data)
                            st.info(f"Plano de A√ß√£o Gerado: {plano_acao}")

                            # Dados completos da inspe√ß√£o
                            new_record = {
                                'numero_identificacao': numero_identificacao,
                                'numero_selo_inmetro': numero_selo_inmetro,
                                'tipo_agente': tipo_agente,
                                'capacidade': capacidade,
                                'marca_fabricante': marca_fabricante,
                                'ano_fabricacao': ano_fabricacao,
                                'tipo_servico': tipo_servico,
                                'data_servico': data_servico.isoformat(),
                                'inspetor_responsavel': get_user_display_name(),
                                'empresa_executante': empresa_executante,
                                'aprovado_inspecao': aprovado,
                                'observacoes_gerais': observacoes_gerais,
                                'plano_de_acao': plano_acao,
                                'link_relatorio_pdf': None,
                                'link_foto_nao_conformidade': None,
                                'latitude': manual_latitude if manual_latitude else None,
                                'longitude': manual_longitude if manual_longitude else None
                            }

                            # Adiciona as datas calculadas
                            new_record.update(updated_dates)

                            try:
                                if save_inspection(new_record):
                                    # Salva o local na aba 'locais' se foi informado
                                    if selected_location:
                                        from operations.extinguisher_operations import update_extinguisher_location
                                        from operations.history import load_sheet_data as load_locations_data

                                        df_locais = load_locations_data(
                                            "locais")

                                        # Busca o nome do local selecionado
                                        if not df_locais.empty:
                                            location_row = df_locais[df_locais['id']
                                                                     == selected_location]
                                            if not location_row.empty:
                                                location_name = location_row.iloc[0]['local']
                                                update_extinguisher_location(
                                                    numero_identificacao, location_name)

                                    log_action(
                                        "SALVOU_INSPECAO_EXTINTOR_MANUAL", f"ID: {numero_identificacao}, Status: {aprovado}")

                                    st.success(
                                        f"‚úÖ Inspe√ß√£o para o extintor '{numero_identificacao}' registrada com sucesso!")

                                    if selected_location:
                                        st.success(
                                            f"üìç Local '{selected_location}' associado ao equipamento.")

                                    if manual_latitude and manual_longitude:
                                        st.success(
                                            f"üó∫Ô∏è Coordenadas GPS salvas: ({manual_latitude:.6f}, {manual_longitude:.6f})")

                                    #st.balloons()

                                    # Limpa as coordenadas capturadas do session_state
                                    st.session_state['manual_lat_captured'] = None
                                    st.session_state['manual_lon_captured'] = None

                                    st.cache_data.clear()
                                    st.rerun()
                            except Exception as e:
                                st.error(f"‚ùå Erro ao salvar a inspe√ß√£o: {e}")
                                import traceback
                                st.error(traceback.format_exc())
